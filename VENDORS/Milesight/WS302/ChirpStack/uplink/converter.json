{
    "name": "Milesight WS302 Uplink for ChirpStack integration",
    "type": "UPLINK",
    "debugMode": true,
    "configuration": {
    "scriptLang": "TBEL",
        "decoder": null,
        "tbelDecoder": "var data = decodeToJson(payload);\nvar deviceName = data.deviceInfo.deviceName;\nvar deviceType = data.deviceInfo.deviceProfileName;\nvar groupName = 'Monitor Sound Level with Ease';\n// var customerName = 'Customer A';\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// If you want to parse incoming data somehow, you can add your code to this function.\n// input: bytes\n// expected output:\n//  {\n//    \"attributes\": {\"attributeKey\": \"attributeValue\"},\n//    \"telemetry\": {\"telemetryKey\": \"telemetryValue\"}\n//  }\n//\n// In the example - bytes will be saved as HEX string and also parsed as light level, battery level and PIR sensor value.\n//\n\nfunction decodePayload(inputArray) {\n    var output = { attributes:{}, telemetry: {}};\n    // --- Decoding code --- //\n    var input = byteArrayToExecutionArrayList(inputArray);\n    output.telemetry.HEX_bytes = bytesToHex(input);\n    var decoded = {};\n    decoded.hexString = bytesToHex(input);\n    for (var i = 0; i < input.length - 2; ) {\n        var channel_id = input[i++];\n        var channel_type = input[i++];\n\n        // BATTERY\n        if (channel_id === 0x01 && channel_type === 0x75) {\n            decoded.battery = input[i];\n            i += 1;\n        }\n        // SOUND\n        else if (channel_id === 0x05 && channel_type === 0x5b) {\n            var weight = input[i];\n            var freq_weight = readFrequencyWeightType(weight & 0x03);\n            var time_weight = readTimeWeightType((weight >> 2) & 0x03);\n\n            sound_level_name = \"L\" + freq_weight + time_weight;\n            sound_level_eq_name = \"L\" + freq_weight + \"eq\";\n            sound_level_max_name = \"L\" + freq_weight + time_weight + \"max\";\n            decoded[sound_level_name] = parseBytesToInt(input, i + 1, 2, false) / 10;\n            decoded[sound_level_eq_name] = parseBytesToInt(input, i + 3, 2, false) / 10;\n            decoded[sound_level_max_name] =parseBytesToInt(input, i + 5, 2, false) / 10;\n            i += 7;\n        }\n        // LoRaWAN Class Type\n        else if (channel_id === 0xff && channel_type === 0x0f) {\n            decoded.lorawan_class = readLoRaWANClass(input[i]);\n            i += 1;\n        } else {\n            break;\n        }\n    }\n    output.telemetry = decoded;\n\n    // --- Decoding code --- //\n    return output;\n}\n\n\nfunction readFrequencyWeightType(type) {\n    switch (type) {\n        case 0:\n            return \"Z\";\n        case 1:\n            return \"A\";\n        case 2:\n            return \"C\";\n    }\n}\n\nfunction readTimeWeightType(type) {\n    switch (type) {\n        case 0: // impulse time weighting\n            return \"I\";\n        case 1: // fast time weighting\n            return \"F\";\n        case 2: // slow time weighting\n            return \"S\";\n    }\n}\n\n// --- attributes and telemetry objects ---\nvar telemetry = {};\nvar attributes = {};\n// --- attributes and telemetry objects ---\n\n// --- Timestamp parsing\nvar dateString = data.time;\nvar timestamp = -1;\nif (dateString != null) {\n    timestamp = new Date(dateString).getTime();\n    if (timestamp == -1) {\n        var secondsSeparatorIndex = dateString.lastIndexOf('.') + 1;\n        var millisecondsEndIndex = dateString.lastIndexOf('+');\n        if (millisecondsEndIndex == -1) {\n            millisecondsEndIndex = dateString.lastIndexOf('Z');\n        }\n        if (millisecondsEndIndex == -1) {\n            millisecondsEndIndex = dateString.lastIndexOf('-');\n        }\n        if (millisecondsEndIndex == -1) {\n            if (dateString.length >= secondsSeparatorIndex + 3) {\n                dateString = dateString.substring(0, secondsSeparatorIndex + 3);\n            }\n        } else {\n            dateString = dateString.substring(0, secondsSeparatorIndex + 3) +\n                dateString.substring(millisecondsEndIndex, dateString.length);\n        }\n        timestamp = new Date(dateString).getTime();\n    }\n}\n// If we cannot parse timestamp - we will use the current timestamp\nif (timestamp == -1) {\n    timestamp = Date.now();\n}\n// --- Timestamp parsing\n\n// You can add some keys manually to attributes or telemetry\nattributes.deduplicationId = data.deduplicationId;\n\n// You can exclude some keys from the result\nvar excludeFromAttributesList = [\"deviceName\", \"rxInfo\", \"confirmed\", \"data\", \"deduplicationId\",\"time\", \"adr\", \"dr\", \"fCnt\"];\nvar excludeFromTelemetryList = [\"data\", \"deviceInfo\", \"txInfo\", \"devAddr\", \"adr\", \"time\", \"fPort\", \"region_common_name\", \"region_config_id\", \"deduplicationId\"];\n\n// Message parsing\n// To avoid paths in the decoded objects we passing false value to function as \"pathInKey\" argument.\n// Warning: pathInKey can cause already found fields to be overwritten with the last value found.\n\nvar telemetryData = toFlatMap(data, excludeFromTelemetryList, false);\nvar attributesData = toFlatMap(data, excludeFromAttributesList, false);\n\nvar uplinkDataList = [];\n\n// Passing incoming bytes to decodePayload function, to get custom decoding\nvar customDecoding = decodePayload(base64ToBytes(data.data));\n\n// Collecting data to result\nif (customDecoding.?telemetry.size() > 0) {\n    telemetry.putAll(customDecoding.telemetry);\n}\n\nif (customDecoding.?attributes.size() > 0) {\n    attributes.putAll(customDecoding.attributes);\n}\n\ntelemetry.putAll(telemetryData);\nattributes.putAll(attributesData);\n\nvar result = {\n    deviceName: deviceName,\n    deviceType: deviceType,\n//  assetName: assetName,\n//  assetType: assetType,\n//  customerName: customerName,\n    groupName: groupName,\n    attributes: attributes,\n    telemetry: {\n        ts: timestamp,\n        values: telemetry\n    }\n};\n\nreturn result;",
        "encoder": null,
        "tbelEncoder": null,
        "updateOnlyKeys": [
        "tenantId",
        "tenantName",
        "applicationId",
        "applicationName",
        "deviceProfileId",
        "deviceProfileName",
        "devEui",
        "devAddr",
        "fPort",
        "frequency",
        "bandwidth",
        "spreadingFactor",
        "codeRate",
        "battery",
        "pir",
        "daylight",
        "confirmed",
        "gatewayId",
        "channel",
        "rfChain",
        "crcStatus"
    ]
},
    "additionalInfo": {
    "description": ""
},
    "edgeTemplate": false
}